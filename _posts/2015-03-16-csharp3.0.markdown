---
layout: post
title:  "Know your language: C# / CSharp (3.0 Edition)"
date:   2015-03-16 08:00:00
categories: csharp
---
In this post, I'll be continuing my coverage of C# / CSharp language features with version 3.0.

I won't be covering the basic stuff you see in most languages, also there are some things that are helpful additions but pretty basic so coverage of them may be brief.

## Features Overview

* 2.0
  * [Generics](https://msdn.microsoft.com/en-us/library/512aeb7t.aspx)
  * [Anonymous Methods](https://msdn.microsoft.com/en-us/library/0yw3tz5k.aspx)
  * [Nullable Types](https://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx)
* 3.0
  * [Implicit Typing](https://msdn.microsoft.com/en-us/library/bb384061.aspx)
  * [Anonymous Types](https://msdn.microsoft.com/en-us/library/bb397696.aspx) 
  * [Extension Methods](https://msdn.microsoft.com/en-us/library/bb383977.aspx)
  * [Lambda Expressions](https://msdn.microsoft.com/en-us/library/bb397687.aspx)
  * [LINQ](https://msdn.microsoft.com/en-us/library/bb397926.aspx)
  * [Expression Trees](https://msdn.microsoft.com/en-us/library/bb397951.aspx)
* 4.0
  * Named Arguments
  * Optional Parameters
  * Late Binding (dynamic)
* 5.0
  * Async features
  * Caller Information
  
## Code Examples

In this blog, I only go over the basics of a concept, but I have more exhaustive and interactive examples on my code solution:

[https://github.com/amalinich/csharpfeatures](https://github.com/amalinich/csharpfeatures)

Each of the feature folders will have a Driver.cs which has a suite of NUnit tests to drive the functionality.  This solution includes examples for all the noted features above.

## 3.0 Features

### Implicit Typing

Implicit Typing lets the compiler and intellisense infer type during assignment by looking at the return type...

{% highlight csharp %}
var myString = "Hello World!"; //Implicitly a 'string'
var stringParts = myString.Split(' '); //Implicitly a 'string array'
Console.WriteLine(stringParts.Length);
{% endhighlight %}

Everything is still strongly typed, it is simply inferred by the right side of the assignment call.

### Anonymous Types

Anonymous types are simple and really great when you want to create objects for short term use, without going through the overhead of defining long standing classes in code.

{% highlight csharp %}
var myData = new { Name = "John Doe" };
Console.WriteLine(myData.Name);
{% endhighlight %}

This also has a specific use in LINQ, but we'll get more in that later.

### Extension Methods

Extension Methods allow you to add instance methods to types without it having to be defined in the class.  This is extremely useful for classes which you don't control...

{% highlight csharp %}
// The key to making this work is static access to both the class and function
// as well as the 'this' keyword on the input object
public static class MyStringExtensions
{
    public static string Yell(this string phrase)
    {
        return phrase.ToUpper() + "!!!";
    }
}

...

var yellingTheNewWay = helloWorld.Yell();
{% endhighlight %}

### Lambda Expressions

### LINQ

### Expression Trees